# Test defintion
# TODO 
# - Add a header 
# - Add a variable bit spec
version = "0.0.1"

[device]
name      = "test_device"
endian    = "le"
word_size = 8


[commands.TEST_COMMAND]
opcode      = 0x09
description = "A test command"

[commands.TEST_COMMAND.request]
a_bit           = { bits = "4", description = "Some status bit" }
a_field         = { bits = "[5..6]", type = "test_field" }
a_u16           = { bits = "1[]..2[]" }
a_u8            = { bits = "3[]" }
a_i16           = { bits = "4[]..5[]", type = "i16" }
a_count         = { bits = "6[]", description = "Count for a_repeating_u16" }
a_repeating_u16 = { bits = "7[]..8[];(6[])<=6" }
# The bit pattern has a flaw! If more fields are placed behind it, 
# then no way to know how big a_repeating_u16 really is as this 
# depends on a_count.

[commands.TEST_COMMAND.response]
a_bit           = { bits = "4" }
a_field         = { bits = "[5..6]", type = "test_field" }
a_u16           = { bits = "1[]..2[]" }
a_u8            = { bits = "3[]" }
a_i16           = { bits = "4[]..5[]", type = "i16" }
a_count         = { bits = "6[]", description = "Count for a_repeating_u16" }
a_repeating_u16 = { bits = "7[]..8[];(6[])<=6" }

[enum.test_field]
disabled = 0
enabled  = 1
tristate = 2
