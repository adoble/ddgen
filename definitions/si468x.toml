# Test defintion for the si486x radio
# Covers a limited number of commands
#  Implication from the data sheet is that CS (SSB) is held low for the 
# send duration of the command and all args. 
# CS is also held low for the duration of all bytes in the response
# 

# TODO ABNF description of this (see https://github.com/toml-lang/toml/blob/1.0.0/toml.abnf) 
version = "0.0.2"

[device]
name      = "si468x"
endian    = "le"
word_size = 8

[struct.header]
cts     = { bits = "7" }
err_cmd = { bits = "6" }
dacqint = { bits = "5", description = "Digital radio link change interrupt indicator." }
dsrvint = { bits = "4", description = "An enabled data component of one of the digital services requires attention." }
stcint  = { bits = "0", description = "Seek / tune complete" }

devntint = { bits = "1[5]", description = "Digital radio event change interrupt indicator." }

pup_state        = { bits = "3[6..7]", type = "power_up_state" }
dsp_err          = { bits = "3[4]", description = "The DSP has encountered a frame overrun." }
repo_fatal_error = { bits = "3[3]" }
cmdo_fatal_error = { bits = "3[2]" }
arb_error        = { bits = "3[1]" }
error_nr         = { bits = "3[0]" }
# rsvd_stat: Reserved for future use 


[commands.GET_SYS_STATE]
opcode       = 0x09
flow_control = { type = "polled", on = "header", condition = "cts" }


# The sizes of the requests and the reponses are soley determined for the fields and their bit specifications
# This can be derived from max "word" value
description = """GET_SYS_STATE reports basic system state information such as which mode is active; FM, DAB, etc. The
command is complete when the CTS bit (and optional interrupt) is set. The ERR bit (and optional interrupt) is set if
an invalid argument is sent. Note that only a single interrupt occurs if both the CTS and ERR bits are set. The
command may only be sent in powerup mode. Note: GET_SYS_STATE command is not supported in firmware
revision A0A."""

[commands.GET_SYS_STATE.request] ## or parameters
arg1 = { bits = "1[0x00]" }

[commands.GET_SYS_STATE.response]
header = { bits = "0[]..3[]", struct = "header" }
image  = { bits = "4[0..7]", type = "active_processing_image" }
dummy  = { bits = "5[]" }

[enum.active_processing_image]
bootloader            = 0
fmhd                  = 1
dab                   = 2
tdmb_or_data_only_dab = 3
fmhd_demod            = 4
amhd                  = 5
amhd_demod            = 6
dab_demod             = 7

[enum.power_up_state]
reset              = 0
bootloader_running = 2
app_running        = 3
# variant 1 is reserved

[commands.DAB_TUNE_FREQ]
opcode = 0xB0
flow_control = { type = "polled", on = "header", condition = "cts" }
description = """DAB_TUNE_FREQ sets the DAB Receiver to tune to a frequency between 168.16 MHz and 239.20 MHz defined
by the table through DAB_SET_FREQ_LIST."""

[commands.DAB_TUNE_FREQ.request]
injection = { bits = "0[0..1]", type = "injection" }
freq_index = { bits = "1[]", description = "Frequency index for the tuned frequency." }
antenna_capacitance = { bits = "3[]..4[]", description = """Antenna tuning capacitor value in 250 fF units (31.75 pF Max). Range: 0-128.
0 : Automatically determines the cap setting.""" }

[commands.DAB_TUNE_FREQ.response]
header = { bits = "0[]..3[]", struct = "header" }


[enum.injection]
automatic = 0
low_side  = 1
high_side = 2

[commands.DAB_SET_FREQ_LIST]
opcode = 0xB8
flow_control = { type = "polled", on = "header", condition = "cts" }
description = """DAB_SET_FREQ_LIST command sets the DAB frequency table. The frequencies are in units of 1 kHz. The table
can be populated with a single entry or a regional list (for example 5 or 6 entries]. It is recommended to make the
list regional to increase scanning speed. The command is complete when the CTS bit (and optional interrupt) is
set. The ERR bit (and optional interrupt) is set if an invalid argument is sent. Note that only a single interrupt occurs
if both the CTS and ERR bits are set. The command may only be sent in powerup mode"""

[commands.DAB_SET_FREQ_LIST.request]
number_frequencies = { bits = "0[]" }
frequencies        = { bits = "3[]..4[];(0[])<=48", type = "u16" }


[commands.DAB_SET_FREQ_LIST.response]
header = { bits = "0[]..3[]", struct = "header" }

[commands.POWER_UP]
opcode       = 0x01
flow_control = { type = "polled", on = "header", condition = "cts" }
description  = """The POWER_UP initiates the boot process to move the device from power down to power up mode. """

[commands.POWER_UP.request]
ibias_run      = { bits = "12[0..6]", description = "TAL IBIAS current at runtime, after the XTAL oscillator has stabilized" }
cts_is_enabled = { bits = "0[7]", description = "The bootloader will toggle a host interrupt line when CTS is available." }
clock_mode     = { bits = "1[4..5]", type = "clock_mode" }
tr_size        = { bits = "1[0..3]", type = "u8", description = "Range 1-15" }
ibais          = { bits = "2[0..6]", type = "u8", description = "XTAL IBIAS current at startup. Range 0-127" }
xtal_frequency = { bits = "3[]..6[]", type = "u32", description = "XTAL frequency in Hz" }
ctun           = { bits = "7[0..5]", type = "u8", description = "Range 0-63" }
arg9           = { bits = "8[0b00010000]" }

[commands.POWER_UP.response]
header = { bits = "0[]..3[]", struct = "header" }

[enum.clock_mode]
powered_down                       = 0
xtal_mode                          = 1
oscillator_off_single_ended_buffer = 2
oscillator_off_differential_buffer = 3


[commands.HOST_LOAD]
opcode       = 0x04
flow_control = { type = "polled", on = "header", condition = "cts" }
description  = "HOST_LOAD loads an image from HOST over command interface"

[commands.HOST_LOAD.request]
arg1       = { bits = "0[0x00]" }
arg2       = { bits = "1[0x00]" }
arg3       = { bits = "2[0x00]" }
image_data = { bits = "3[];<=4096", type = "HostImageDataLoader" } # This is actually variable repeat with NO count word

[commands.HOST_LOAD.response]
header = { bits = "0[];4", struct = "header" } # Trying out a different bit lang expression here to see if it still works. 

[commands.FLASH_LOAD]
opcode       = 0x05
flow_control = { type = "polled", on = "header", condition = "cts" }
description  = "FLASH_LOAD loads the firmware image from an externally attached SPI flash over the secondary SPI bus."

[commands.FLASH_LOAD.request]
arg1                = { bits = "0[0x00]" }
arg2                = { bits = "1[0x00]" }
arg3                = { bits = "2[0x00]" }
flash_start_address = { bits = "3[]..6[]", description = "Flash byte starting address of image to load" }
arg8                = { bits = "7[0x00]" }
arg9                = { bits = "8[0x00]" }
arg10               = { bits = "9[0x00]" }
arg11               = { bits = "10[0x00]" }

[commands.FLASH_LOAD.response]
header = { bits = "0[]..3[]", struct = "header" }

[commands.LOAD_INIT]
opcode       = 0x06
flow_control = { type = "polled", on = "header", condition = "cts" }
description  = "LOAD_INIT prepares the bootloader to receive a new image."

[commands.LOAD_INIT.request]
arg1 = { bits = "0[0x00]" }

[commands.LOAD_INIT.response]
header = { bits = "0[];4", struct = "header" }


[commands.BOOT]
opcode       = 0x07
flow_control = { type = "polled", on = "header", condition = "cts" }
description  = "LOAD_INIT prepares the bootloader to receive a new image."

[commands.BOOT.request]
arg1 = { bits = "0[0x00]" }

[commands.BOOT.response]
header = { bits = "0[];4", struct = "header" }

[commands.GET_PART_INFO]
opcode       = 0x08
flow_control = { type = "polled", on = "header", condition = "cts" }
description  = "GET_PART_INFO reports basic information about the device such as Part Number, Part Version, ROM ID, etc.."

[commands.GET_PART_INFO.request]
arg1 = { bits = "0[0x00]" }

[commands.GET_PART_INFO.response]
header             = { bits = "0[];4", struct = "header" }
chip_mask_revision = { bits = "4[]" }
rom_id             = { bits = "5[]" }
part_number        = { bits = "8[]..9[]" }
_padding           = { bits = "10[];13" }

[commands.GET_FUNC_INFO]
opcode = 0x12
flow_control = { type = "polled", on = "header", condition = "cts" }
description = """GET_FUNC_INFO returns the function revision number for currently loaded firmware (FMHD, AM etc.) as opposed
to GET_PART_INFO command that provides the revision number for the combo firmware. For example,
GET_PART_INFO would return A0B is the firmware revision while GET_FUNC_INFO would return 1.0.4 for FM
function revision if the currently running firmware function is FM."""

[commands.GET_FUNC_INFO.request]
arg1 = { bits = "0[0x00]" }

[commands.GET_FUNC_INFO.response]
header                = { bits = "0[];4", struct = "header" }
major_revision_number = { bits = "4[]", description = "First part of 1.2.3" }
minor_revision_number = { bits = "5[]", description = "Second part of 1.2.3" }
build_revision_number = { bits = "6[]", description = "Third part of 1.2.3" }
no_svn                = { bits = "7[7]", description = "If set the build was created with no SVN info." }
location              = { bits = "7[4..5]", type = "image_build_location", description = "The location from which the image was built." }
mixed_revisions       = { bits = "7[1]", description = "If set, the image was built from mixed revisions." }
local_modifications   = { bits = "7[0]", description = "If set, the image has local modifications." }
svn_id                = { bits = "8[]..11[]", description = "SVN ID for which the image was built." }


[enum.image_build_location]
tag    = 0
branch = 1
trunk  = 2


[commands.SET_PROPERTY]
opcode       = 0x13
flow_control = { type = "polled", on = "header", condition = "cts" }
description  = """SET_PROPERTY sets the value of a property"""

[commands.SET_PROPERTY.request]
arg1        = { bits = "0[0x00]" }
property_id = { bits = "1[]..2[]", description = "ID of the property to set." }
data        = { bits = "3[]..4[]", type = "i16", description = "Value for the written property." }

[commands.SET_PROPERTY.response]
header = { bits = "0[];4", struct = "header" }


[commands.DAB_GET_DIGITAL_SERVICE_LIST]
opcode       = 0x80
flow_control = { type = "polled", on = "header", condition = "cts" }
description  = """GET_DIGITAL_SERVICE_LIST gets a service list of the ensemble."""

[commands.DAB_GET_DIGITAL_SERVICE_LIST.request]
service_type = { bits = "0[0..1]", type = "service_type", description = "Sets the type of service list to retrieve." }

[commands.DAB_GET_DIGITAL_SERVICE_LIST.response]
header       = { bits = "0[];4", struct = "header" }
service_size = { bits = "4[]..5[]", description = "The size of the service list in bytes." }
data         = { bits = "6[]..7[];(4[]..5[])<=2047", description = "A max of 2047 bytes of service information" }


[enum.service_type]
audio_service = 0
data_service  = 1
hd_audio_info = 2
hd_data_info  = 3


[commands.START_DIGITAL_SERVICE]
opcode = 0x81
flow_control = { type = "polled", on = "header", condition = "cts" }
description = """START_DIGITAL_SERVICE starts an audio or data service. This command is used for HD audio and data
services."""

[commands.START_DIGITAL_SERVICE.request]
service_type = { bits = "0[0..0]", type = "service_selector", description = "Sets the type of service to start for HD applications." }
arg2         = { bits = "1[0x00]" }
arg3         = { bits = "2[0x00]" }
service_id   = { bits = "3[]..6[]", description = "The service's Service Number (HD)." }
comp_id      = { bits = "7[]..10[]", description = "The service's Port/Program Number (HD)" }

[commands.START_DIGITAL_SERVICE.response]
header = { bits = "0[];4", struct = "header" }

[enum.service_selector]
audio = 0
data  = 1


[commands.STOP_DIGITAL_SERVICE]
opcode       = 0x82
flow_control = { type = "polled", on = "header", condition = "cts" }
description  = """START_DIGITAL_SERVICE stops an audio or data service."""

[commands.STOP_DIGITAL_SERVICE.request]
service_type = { bits = "0[0..0]", type = "service_selector", description = "Sets the type of service to start for HD applications." }
arg2         = { bits = "1[0x00]" }
arg3         = { bits = "2[0x00]" }
service_id   = { bits = "3[]..6[]", description = "The service's Service Number (HD)." }
comp_id      = { bits = "7[]..10[]", description = "The service's Port/Program Number (HD)" }

[commands.STOP_DIGITAL_SERVICE.response]
header = { bits = "0[];4", struct = "header" }


[commands.DAB_DIGRAD_STATUS]
opcode = 0xB2
flow_control = { type = "polled", on = "header", condition = "cts" }
description = """B_DIGRAD_STATUS returns status information about the digital radio and ensemble including a change in
ensemble acquisition state, current estimates for ensemble's MSC (Main Service Channel) BER (bit error rate),
FIC (Fast Information Channel) BER along with number of FIBs (Fast Information Block) that failed a CRC check
and number of Reed-Solomon decoder errors (DAB+ and DMB only)"""

[commands.DAB_DIGRAD_STATUS.request]
digrad_ack = { bits = "0[3]", description = "Clears all pending digital radio interrupts." }
at_tune = { bits = "0[2]", description = """Return the values as of DAB_VALID_RSSI_TIME after tune. Only the signal quality
metric RSSI is affected by setting this bit.
0 : Return the current status
1 : Return the snapshot taken at DAB_VALID_RSSI_TIME""" }
stc_ack = { bits = "0[0]", description = "Clears the STC interrupt status when set." }

[commands.DAB_DIGRAD_STATUS.response]
header                                         = { bits = "0[];4", struct = "header" }
hard_mute_indicator                            = { bits = "4[4]", description = "Indicates that the audio had been muted. Possibly due to low signal" }
fast_information_channel_decoder_err_indicator = { bits = "4[3]", description = "Indicates that the FIC decoder has unrecoverable errors. Possibly due to low signal" }
ensemble_acquisition_state_change_indicator    = { bits = "4[2]", description = "ndicates a change in the ensemble acquisition state." }
received_signal_strength_indicator_high        = { bits = "4[1]", description = "Indicates RSSI below DAB_DIGRAD_RSSI_LOW_THRESHOLD." }
received_signal_strength_indicator_low         = { bits = "4[0]", description = "Indicates RSSI above DAB_DIGRAD_RSSI_HIGH_THRESHOLD" }
hard_mute                                      = { bits = "5[4..4]", type = "audio_mute", description = "Sets the mute status the audio" }
fast_information_channel_error                 = { bits = "5[3]", description = "When set the ensemble is experiencing FIC errors." }
ensemble_acquired                              = { bits = "5[2]", description = "Set to true when ensemble acquired." }
received_signal_strength_indicator_valid       = { bits = "5[0]", description = "When set, the RSSI is at or above the valid threshold." }
received_signal_strength_indicator             = { bits = "6[]", type = "i8", description = "Received signal strength indicator. Range: -128-63" }
signal_noise_ratio                             = { bits = "7[]", description = "SNR in dB." }
fast_information_channel_quality               = { bits = "8[]", description = "Indicates the current estimate of the ensembles FIC quality. Range 0 - 100." }
cnr                                            = { bits = "9[]", description = "CUrrent estimate of CNR in dB. Range 0 - 54." }
fast_information_block_error_count             = { bits = "10[]..11[]", description = "Number of fast information blocks received with errors." }
tuned_frequency                                = { bits = "12[]..15[]", description = "Currently tuned frequency in kHz." }
fft_offset                                     = { bits = "17[]", description = "Indicates the frequency offset of the DQPSK tones of the OFDM signal relative to the center of the FFT bins of the digital demod" }
read_antenna_capacitance                       = { bits = "18[]..19[]", description = "Antenna tuning capacitance value" }
cu_level                                       = { bits = "20[]..21[]", description = "Number of currently decoded CUs" }
fast_dect                                      = { bits = "22[]", description = "Returns the statistical metric for DAB fast detect. " }

[enum.audio_mute]
unmuted = 0
muted   = 1


[commands.DAB_GET_EVENT_STATUS]
opcode       = 0xB3
flow_control = { type = "polled", on = "header", condition = "cts" }
description  = "Gets information about the various events related to the DAB radio"

[commands.DAB_GET_EVENT_STATUS.request]
event_ack = { bits = "0[0]", description = "Clears all pending digital radion event interrupts." }

[commands.DAB_GET_EVENT_STATUS.response]
header                           = { bits = "0[];4", struct = "header" }
ensemble_reconfiguration_event   = { bits = "4[7]", description = "Ensemble reconfiguration event. RECFGINT bit." }
ensemble_reconfiguration_warning = { bits = "4[6]", description = "Ensemble reconfiguration warning. RECFGWRNINT bit" }
announcement_interrupt           = { bits = "4[3]", description = "New announcement info interrupt." }
frequency_infomation_interrupt   = { bits = "4[1]", description = "Indicates that new frequency infomation is available." }
service_list_interrupt           = { bits = "4[0]", description = "Indicates that a new digital service list is available." }
freqency_information_available   = { bits = "5[1]", description = "Indicates that frequency information is available." }
service_list_available           = { bits = "5[0]" }
service_list_version             = { bits = "6[]..7[]", description = "Current version of the digital service list." }


[commands.DAB_GET_ENSEMBLE_INFO]
opcode       = 0xB4
flow_control = { type = "polled", on = "header", condition = "cts" }
description  = "gets information about the current ensemble such as the ensemble ID and label."

[commands.DAB_GET_ENSEMBLE_INFO.request]
arg1 = { bits = "0[0x00]" }

[commands.DAB_GET_ENSEMBLE_INFO.response]
header = { bits = "0[];4", struct = "header" }

eid                               = { bits = "4[]..5[]", description = "Ensemble ID EID." }
label                             = { bits = "6[];16", description = "Ensemble label characters." }
ensemble_extended_country_code    = { bits = "22[]", description = "Ensemble ECC." }
component_label_abbreviation_mask = { bits = "24[]..25[]", description = "Indicates which characters in the label are used to create the abbreviated label" }


[commands.GET_TIME]
opcode       = 0xBC
flow_control = { type = "polled", on = "header", condition = "cts" }
description  = "Gets the ensemble time adjusted for the local time offset"

[commands.GET_TIME.request]
time_type = { bits = "0[0..7]", type = "time_type" }

[commands.GET_TIME.response]
header  = { bits = "0[];4", struct = "header" }
year    = { bits = "4[]..5[]" }
months  = { bits = "6[]" }
days    = { bits = "7[]" }
hours   = { bits = "8[]" }
minutes = { bits = "9[]" }
seconds = { bits = "10[]" }

[enum.time_type]
local_time = 0
utc        = 1


[commands.DAB_GET_AUDIO_INFO]
opcode       = 0xBD
flow_control = { type = "polled", on = "header", condition = "cts" }
description  = "Gets information about the current audio service (decoder bps, audio mode)"

[commands.DAB_GET_AUDIO_INFO.request]
dummy = { bits = "0[0x00]" }

[commands.DAB_GET_AUDIO_INFO.response]
header            = { bits = "0[];4", struct = "header" }
audio_bit_rate    = { bits = "4[]..5[]", description = "Audio bit rate of the current audio service (kbps)." }
audio_sample_rate = { bits = "6[]..7[]", description = "Sample rate of the current audio service (Hz)." }

audio_ps_flag = { bits = "8[3]", description = "PS usage. Only for DAB+" }
audio_sbr_flag = { bits = "8[2]", description = "Spectral Band Replication. Only for DAB+" }
audio_mode = { bits = "8[0..1]", type = "audio_mode" }
audio_drc_gain = { bits = "9[]", description = """The transmitter specified dynamic range control (DRC) gain of the current audio
service. The range of this field is from 0 to 63, representing 0 to 15.75dB in increment of 0.25dB.""" }


[enum.audio_mode]
dual         = 0
mono         = 1
stereo       = 2
joint_stereo = 3

[commands.DAB_GET_SUBCHAN_INFO]
opcode       = 0xBE
flow_control = { type = "polled", on = "header", condition = "cts" }
description  = "Gets information about the sub-channel (service mode, protection, subchannel bps)."

[commands.DAB_GET_SUBCHAN_INFO.request]
dummy        = { bits = "0[0x00];3" }
service_id   = { bits = "3[]..6[]" }
component_id = { bits = "7[]..10[]" }

[commands.DAB_GET_SUBCHAN_INFO.response]
header                = { bits = "0[];4", struct = "header" }
service_mode          = { bits = "4[0..7]", type = "service_mode" }
protection_info       = { bits = "5[0..7]", type = "protection_profile", description = "Protection profile of the sub-channel." }
sub_channel_bit_rate  = { bits = "6[]..7[]", description = "Sub-channel bit rate (kpbs)." }
number_capacity_units = { bits = "8[]..9[]", description = "Number of Capacity units assigned to this service component." }
capacity_unit_address = { bits = "10[]..11[]", description = "CU starting address of this subchannel within the CIF" }

[enum.service_mode]
audio_stream_service    = 0
data_stream_service     = 1
fidc_service            = 2
msc_data_packet_service = 3
dab_plus                = 4
dab                     = 5
fic_service             = 6
xpad_data               = 7
no_media                = 8

[enum.protection_profile]
UEP_mode_level_1   = 1
UEP_mode_level_2   = 2
UEP_mode_level_3   = 3
UEP_mode_level_4   = 4
UEP_mode_level_5   = 5
EEP_mode_level_A_1 = 6
EEP_mode_level_A_2 = 7
EEP_mode_level_A_3 = 8
EEP_mode_level_A_4 = 9
EEP_mode_level_B_1 = 10
EEP_mode_level_B_2 = 11
EEP_mode_level_B_3 = 12
EEP_mode_level_B_4 = 13

[commands.DAB_GET_SERVICE_INFO]
opcode       = 0xC0
flow_control = { type = "polled", on = "header", condition = "cts" }
description  = "Gets information about a service"

[commands.DAB_GET_SERVICE_INFO.request]
dummy1     = { bits = "0[0x00]" }
dummy2     = { bits = "1[0x00]" }
dummy3     = { bits = "2[0x00]" }
service_id = { bits = "3[]..6[]" }

[commands.DAB_GET_SERVICE_INFO.response]
header                          = { bits = "0[];4", struct = "header" }
service_linking_info            = { bits = "4[6]", description = "Set to true if service linking info is available for this service." }
service_program_type            = { bits = "4[1..5]", type = "service_program_type" }
pd_flag                         = { bits = "4[0..0]", type = "service_selector" }
local                           = { bits = "5[7..7]", type = "local", description = "Service is available over the entire or part of the ensemble service area." }
ca_id                           = { bits = "5[4..6]", type = "ca_identifier", description = "Access control used." }
number_components               = { bits = "5[0..3]", type = "u8", description = "Number of components in this service." }
si_char_set                     = { bits = "6[0..3]", type = "char_set", description = "Indicates char set" }
service_extended_country_code   = { bits = "7[]" }
label                           = { bits = "8[];16", description = "Service label characters" }
service_label_abbreviation_mask = { bits = "24[]..25[]", description = "Used to indicate which characters in the label are used to create the abbreviated label." }


[enum.local]
over_entire_ensemble = 0
over_part_ensemble   = 1

# See ETSI TS 102 367 Clause 5.1
[enum.ca_identifier]
no_access_control   = 0
component_scrambled = 7

# See ETSI TS 101 756, clause 5.3
[enum.char_set]
ebu_latin = 0
utf_16_be = 6
utf_8     = 15

# See See ETSI TS 101 756, table 12
[enum.service_program_type]
no_programme_type    = 0
news                 = 1
current_affairs      = 2
information          = 3
sport                = 4
education            = 5
drama                = 6
culture              = 7
science              = 8
varied               = 9
pop_music            = 10
rock_music           = 11
easy_listening       = 12
light_classical      = 13
serious_classical    = 14
other_music          = 15
weather_meteorology  = 16
finance_business     = 17
childrens_programmes = 18
social_affairs       = 19
religion             = 20
phone_in             = 21
travel               = 22
leisure              = 23
jazz_music           = 24
country_music        = 25
national_music       = 26
oldies_music         = 27
folk_music           = 28
documentary          = 29


[commands.READ_OFFSET]
opcode = 0x10
flow_control = { type = "polled", on = "header", condition = "cts" }
description = """Used for applications that cannot read the entire response buffer. This type of application can
use this command to read the response buffer in segments"""

[commands.READ_OFFSET.request]
dummy  = { bits = "0[0x00]" }
offset = { bits = "1[]..2[]" }

[commands.READ_OFFSET.response]
header = { bits = "0[];4", struct = "header" }
data   = { bits = "4[]" }


# Commands used in the DABShield C++ driver
# POWER_UP       X
# HOST_LOAD      X
# FLASH_LOAD     X
# LOAD_INIT      X
# BOOT           X
# GET_PART_INFO  X
# GET_FUNC_INFO  X
# SET_PROPERTY   X
# DAB_GET_DIGITAL_SERVICE_LIST X
# DAB_START_DIGITAL_SERVICE X
# GET_DIGITAL_SERVICE_DATA  X
# DAB_TUNE_FREQ X
# DAB_DIGRAD_STATUS X
# DAB_GET_EVENT_STATUS  X
# DAB_GET_ENSEMBLE_INFO X
# DAB_SET_FREQ_LIST X
# GET_TIME  X
# DAB_GET_AUDIO_INFO    X
# DAB_GET_SUBCHAN_INFO  X
# DAB_GET_SERVICE_INFO  X
# READ_OFFSET   X
